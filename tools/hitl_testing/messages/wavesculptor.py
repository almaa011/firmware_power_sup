
# This file is generated by hitl_msg_gen.py

from messages.abstract_message import AbstractMessage

import can  # pip install python-can    

class WsrIdentification(AbstractMessage):

    can_id = 0x140
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def tritium_id(self):
        return self._get_uint32(byte=0)

    @tritium_id.setter
    def tritium_id(self, value):
        self._set_uint32(byte=0, value=value)

    @property
    def serial_number(self):
        return self._get_uint32(byte=4)

    @serial_number.setter
    def serial_number(self, value):
        self._set_uint32(byte=4, value=value)


class WsrStatusInformation(AbstractMessage):

    can_id = 0x141
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def output_voltage_pwm(self):
        return self._get_bitfield(byte=0, pos=0)

    @output_voltage_pwm.setter
    def output_voltage_pwm(self, value):
        self._set_bitfield(byte=0, pos=0, value=value)

    @property
    def motor_current(self):
        return self._get_bitfield(byte=0, pos=1)

    @motor_current.setter
    def motor_current(self, value):
        self._set_bitfield(byte=0, pos=1, value=value)

    @property
    def velocity(self):
        return self._get_bitfield(byte=0, pos=2)

    @velocity.setter
    def velocity(self, value):
        self._set_bitfield(byte=0, pos=2, value=value)

    @property
    def bus_current(self):
        return self._get_bitfield(byte=0, pos=3)

    @bus_current.setter
    def bus_current(self, value):
        self._set_bitfield(byte=0, pos=3, value=value)

    @property
    def bus_voltage_upper_limit(self):
        return self._get_bitfield(byte=0, pos=4)

    @bus_voltage_upper_limit.setter
    def bus_voltage_upper_limit(self, value):
        self._set_bitfield(byte=0, pos=4, value=value)

    @property
    def bus_voltage_lower_limit(self):
        return self._get_bitfield(byte=0, pos=5)

    @bus_voltage_lower_limit.setter
    def bus_voltage_lower_limit(self, value):
        self._set_bitfield(byte=0, pos=5, value=value)

    @property
    def ipm_temperature_or_motor_temperature(self):
        return self._get_bitfield(byte=0, pos=6)

    @ipm_temperature_or_motor_temperature.setter
    def ipm_temperature_or_motor_temperature(self, value):
        self._set_bitfield(byte=0, pos=6, value=value)

    @property
    def reserved(self):
        return self._get_bitfield(byte=0, pos=7)

    @reserved.setter
    def reserved(self, value):
        self._set_bitfield(byte=0, pos=7, value=value)

    @property
    def limit_flags_reserved(self):
        return self._get_uint8(byte=1)

    @limit_flags_reserved.setter
    def limit_flags_reserved(self, value):
        self._set_uint8(byte=1, value=value)

    @property
    def hardware_over_current(self):
        return self._get_bitfield(byte=2, pos=0)

    @hardware_over_current.setter
    def hardware_over_current(self, value):
        self._set_bitfield(byte=2, pos=0, value=value)

    @property
    def software_over_current(self):
        return self._get_bitfield(byte=2, pos=1)

    @software_over_current.setter
    def software_over_current(self, value):
        self._set_bitfield(byte=2, pos=1, value=value)

    @property
    def dc_bus_over_voltage(self):
        return self._get_bitfield(byte=2, pos=2)

    @dc_bus_over_voltage.setter
    def dc_bus_over_voltage(self, value):
        self._set_bitfield(byte=2, pos=2, value=value)

    @property
    def bad_motor_position_hall_sequence(self):
        return self._get_bitfield(byte=2, pos=3)

    @bad_motor_position_hall_sequence.setter
    def bad_motor_position_hall_sequence(self, value):
        self._set_bitfield(byte=2, pos=3, value=value)

    @property
    def watchdog_caused_last_reset(self):
        return self._get_bitfield(byte=2, pos=4)

    @watchdog_caused_last_reset.setter
    def watchdog_caused_last_reset(self, value):
        self._set_bitfield(byte=2, pos=4, value=value)

    @property
    def config_read_error(self):
        return self._get_bitfield(byte=2, pos=5)

    @config_read_error.setter
    def config_read_error(self, value):
        self._set_bitfield(byte=2, pos=5, value=value)

    @property
    def lv_rail_under_voltage_lock_out(self):
        return self._get_bitfield(byte=2, pos=6)

    @lv_rail_under_voltage_lock_out.setter
    def lv_rail_under_voltage_lock_out(self, value):
        self._set_bitfield(byte=2, pos=6, value=value)

    @property
    def desaturation_fault(self):
        return self._get_bitfield(byte=2, pos=7)

    @desaturation_fault.setter
    def desaturation_fault(self, value):
        self._set_bitfield(byte=2, pos=7, value=value)

    @property
    def motor_over_speed(self):
        return self._get_bitfield(byte=3, pos=0)

    @motor_over_speed.setter
    def motor_over_speed(self, value):
        self._set_bitfield(byte=3, pos=0, value=value)

    @property
    def reserved_9(self):
        return self._get_bitfield(byte=3, pos=1)

    @reserved_9.setter
    def reserved_9(self, value):
        self._set_bitfield(byte=3, pos=1, value=value)

    @property
    def reserved_10(self):
        return self._get_bitfield(byte=3, pos=2)

    @reserved_10.setter
    def reserved_10(self, value):
        self._set_bitfield(byte=3, pos=2, value=value)

    @property
    def reserved_11(self):
        return self._get_bitfield(byte=3, pos=3)

    @reserved_11.setter
    def reserved_11(self, value):
        self._set_bitfield(byte=3, pos=3, value=value)

    @property
    def reserved_12(self):
        return self._get_bitfield(byte=3, pos=4)

    @reserved_12.setter
    def reserved_12(self, value):
        self._set_bitfield(byte=3, pos=4, value=value)

    @property
    def reserved_13(self):
        return self._get_bitfield(byte=3, pos=5)

    @reserved_13.setter
    def reserved_13(self, value):
        self._set_bitfield(byte=3, pos=5, value=value)

    @property
    def reserved_14(self):
        return self._get_bitfield(byte=3, pos=6)

    @reserved_14.setter
    def reserved_14(self, value):
        self._set_bitfield(byte=3, pos=6, value=value)

    @property
    def reserved_15(self):
        return self._get_bitfield(byte=3, pos=7)

    @reserved_15.setter
    def reserved_15(self, value):
        self._set_bitfield(byte=3, pos=7, value=value)

    @property
    def active_motor(self):
        return self._get_uint16(byte=4)

    @active_motor.setter
    def active_motor(self, value):
        self._set_uint16(byte=4, value=value)

    @property
    def reserved(self):
        return self._get_uint16(byte=6)

    @reserved.setter
    def reserved(self, value):
        self._set_uint16(byte=6, value=value)


class WsrBusMeasurement(AbstractMessage):

    can_id = 0x142
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def bus_voltage(self):
        return self._get_float(byte=0)

    @bus_voltage.setter
    def bus_voltage(self, value):
        self._set_float(byte=0, value=value)

    @property
    def bus_current(self):
        return self._get_float(byte=4)

    @bus_current.setter
    def bus_current(self, value):
        self._set_float(byte=4, value=value)


class WsrVelocity(AbstractMessage):

    can_id = 0x143
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def motor_velocity(self):
        return self._get_float(byte=0)

    @motor_velocity.setter
    def motor_velocity(self, value):
        self._set_float(byte=0, value=value)

    @property
    def vehicle_velocity(self):
        return self._get_float(byte=4)

    @vehicle_velocity.setter
    def vehicle_velocity(self, value):
        self._set_float(byte=4, value=value)


class WsrPhaseCurrent(AbstractMessage):

    can_id = 0x144
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def phase_b_current(self):
        return self._get_float(byte=0)

    @phase_b_current.setter
    def phase_b_current(self, value):
        self._set_float(byte=0, value=value)

    @property
    def phase_c_current(self):
        return self._get_float(byte=4)

    @phase_c_current.setter
    def phase_c_current(self, value):
        self._set_float(byte=4, value=value)


class WsrMotorVoltageVector(AbstractMessage):

    can_id = 0x145
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def vq(self):
        return self._get_float(byte=0)

    @vq.setter
    def vq(self, value):
        self._set_float(byte=0, value=value)

    @property
    def vd(self):
        return self._get_float(byte=4)

    @vd.setter
    def vd(self, value):
        self._set_float(byte=4, value=value)


class WsrMotorCurrentVector(AbstractMessage):

    can_id = 0x146
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def iq(self):
        return self._get_float(byte=0)

    @iq.setter
    def iq(self, value):
        self._set_float(byte=0, value=value)

    @property
    def id(self):
        return self._get_float(byte=4)

    @id.setter
    def id(self, value):
        self._set_float(byte=4, value=value)


class WsrMotorBackemf(AbstractMessage):

    can_id = 0x147
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def bemfq(self):
        return self._get_float(byte=0)

    @bemfq.setter
    def bemfq(self, value):
        self._set_float(byte=0, value=value)

    @property
    def bemfd(self):
        return self._get_float(byte=4)

    @bemfd.setter
    def bemfd(self, value):
        self._set_float(byte=4, value=value)


class Wsr15165VoltageRail(AbstractMessage):

    can_id = 0x148
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def reference_165v(self):
        return self._get_float(byte=0)

    @reference_165v.setter
    def reference_165v(self, value):
        self._set_float(byte=0, value=value)

    @property
    def supply_15v(self):
        return self._get_float(byte=4)

    @supply_15v.setter
    def supply_15v(self, value):
        self._set_float(byte=4, value=value)


class Wsr2512VoltageRail(AbstractMessage):

    can_id = 0x149
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def supply_12v(self):
        return self._get_float(byte=0)

    @supply_12v.setter
    def supply_12v(self, value):
        self._set_float(byte=0, value=value)

    @property
    def supply_25v(self):
        return self._get_float(byte=4)

    @supply_25v.setter
    def supply_25v(self, value):
        self._set_float(byte=4, value=value)


class WsrHeatsinkMotorTemp(AbstractMessage):

    can_id = 0x14b
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def motor_temp(self):
        return self._get_float(byte=0)

    @motor_temp.setter
    def motor_temp(self, value):
        self._set_float(byte=0, value=value)

    @property
    def heatsink_temp(self):
        return self._get_float(byte=4)

    @heatsink_temp.setter
    def heatsink_temp(self, value):
        self._set_float(byte=4, value=value)


class WsrDspBoardTemp(AbstractMessage):

    can_id = 0x14c
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def dsp_board_temp(self):
        return self._get_float(byte=0)

    @dsp_board_temp.setter
    def dsp_board_temp(self, value):
        self._set_float(byte=0, value=value)

    @property
    def reserved(self):
        return self._get_float(byte=4)

    @reserved.setter
    def reserved(self, value):
        self._set_float(byte=4, value=value)


class WsrReserved(AbstractMessage):

    can_id = 0x14d
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def reserved0(self):
        return self._get_float(byte=0)

    @reserved0.setter
    def reserved0(self, value):
        self._set_float(byte=0, value=value)

    @property
    def reserved1(self):
        return self._get_float(byte=4)

    @reserved1.setter
    def reserved1(self, value):
        self._set_float(byte=4, value=value)


class WsrOdometerBusAmphoursMeasurement(AbstractMessage):

    can_id = 0x14e
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def odometer(self):
        return self._get_float(byte=0)

    @odometer.setter
    def odometer(self, value):
        self._set_float(byte=0, value=value)

    @property
    def dc_bus_amphours(self):
        return self._get_float(byte=4)

    @dc_bus_amphours.setter
    def dc_bus_amphours(self, value):
        self._set_float(byte=4, value=value)


class WsrSlipSpeedMeasurement(AbstractMessage):

    can_id = 0x157
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def reserved(self):
        return self._get_float(byte=0)

    @reserved.setter
    def reserved(self, value):
        self._set_float(byte=0, value=value)

    @property
    def slip_speed(self):
        return self._get_float(byte=4)

    @slip_speed.setter
    def slip_speed(self, value):
        self._set_float(byte=4, value=value)


class WslIdentification(AbstractMessage):

    can_id = 0x100
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def tritium_id(self):
        return self._get_uint32(byte=0)

    @tritium_id.setter
    def tritium_id(self, value):
        self._set_uint32(byte=0, value=value)

    @property
    def serial_number(self):
        return self._get_uint32(byte=4)

    @serial_number.setter
    def serial_number(self, value):
        self._set_uint32(byte=4, value=value)


class WslStatusInformation(AbstractMessage):

    can_id = 0x101
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def output_voltage_pwm(self):
        return self._get_bitfield(byte=0, pos=0)

    @output_voltage_pwm.setter
    def output_voltage_pwm(self, value):
        self._set_bitfield(byte=0, pos=0, value=value)

    @property
    def motor_current(self):
        return self._get_bitfield(byte=0, pos=1)

    @motor_current.setter
    def motor_current(self, value):
        self._set_bitfield(byte=0, pos=1, value=value)

    @property
    def velocity(self):
        return self._get_bitfield(byte=0, pos=2)

    @velocity.setter
    def velocity(self, value):
        self._set_bitfield(byte=0, pos=2, value=value)

    @property
    def bus_current(self):
        return self._get_bitfield(byte=0, pos=3)

    @bus_current.setter
    def bus_current(self, value):
        self._set_bitfield(byte=0, pos=3, value=value)

    @property
    def bus_voltage_upper_limit(self):
        return self._get_bitfield(byte=0, pos=4)

    @bus_voltage_upper_limit.setter
    def bus_voltage_upper_limit(self, value):
        self._set_bitfield(byte=0, pos=4, value=value)

    @property
    def bus_voltage_lower_limit(self):
        return self._get_bitfield(byte=0, pos=5)

    @bus_voltage_lower_limit.setter
    def bus_voltage_lower_limit(self, value):
        self._set_bitfield(byte=0, pos=5, value=value)

    @property
    def ipm_temperature_or_motor_temperature(self):
        return self._get_bitfield(byte=0, pos=6)

    @ipm_temperature_or_motor_temperature.setter
    def ipm_temperature_or_motor_temperature(self, value):
        self._set_bitfield(byte=0, pos=6, value=value)

    @property
    def reserved(self):
        return self._get_bitfield(byte=0, pos=7)

    @reserved.setter
    def reserved(self, value):
        self._set_bitfield(byte=0, pos=7, value=value)

    @property
    def limit_flags_reserved(self):
        return self._get_uint8(byte=1)

    @limit_flags_reserved.setter
    def limit_flags_reserved(self, value):
        self._set_uint8(byte=1, value=value)

    @property
    def hardware_over_current(self):
        return self._get_bitfield(byte=2, pos=0)

    @hardware_over_current.setter
    def hardware_over_current(self, value):
        self._set_bitfield(byte=2, pos=0, value=value)

    @property
    def software_over_current(self):
        return self._get_bitfield(byte=2, pos=1)

    @software_over_current.setter
    def software_over_current(self, value):
        self._set_bitfield(byte=2, pos=1, value=value)

    @property
    def dc_bus_over_voltage(self):
        return self._get_bitfield(byte=2, pos=2)

    @dc_bus_over_voltage.setter
    def dc_bus_over_voltage(self, value):
        self._set_bitfield(byte=2, pos=2, value=value)

    @property
    def bad_motor_position_hall_sequence(self):
        return self._get_bitfield(byte=2, pos=3)

    @bad_motor_position_hall_sequence.setter
    def bad_motor_position_hall_sequence(self, value):
        self._set_bitfield(byte=2, pos=3, value=value)

    @property
    def watchdog_caused_last_reset(self):
        return self._get_bitfield(byte=2, pos=4)

    @watchdog_caused_last_reset.setter
    def watchdog_caused_last_reset(self, value):
        self._set_bitfield(byte=2, pos=4, value=value)

    @property
    def config_read_error(self):
        return self._get_bitfield(byte=2, pos=5)

    @config_read_error.setter
    def config_read_error(self, value):
        self._set_bitfield(byte=2, pos=5, value=value)

    @property
    def lv_rail_under_voltage_lock_out(self):
        return self._get_bitfield(byte=2, pos=6)

    @lv_rail_under_voltage_lock_out.setter
    def lv_rail_under_voltage_lock_out(self, value):
        self._set_bitfield(byte=2, pos=6, value=value)

    @property
    def desaturation_fault(self):
        return self._get_bitfield(byte=2, pos=7)

    @desaturation_fault.setter
    def desaturation_fault(self, value):
        self._set_bitfield(byte=2, pos=7, value=value)

    @property
    def motor_over_speed(self):
        return self._get_bitfield(byte=3, pos=0)

    @motor_over_speed.setter
    def motor_over_speed(self, value):
        self._set_bitfield(byte=3, pos=0, value=value)

    @property
    def reserved_9(self):
        return self._get_bitfield(byte=3, pos=1)

    @reserved_9.setter
    def reserved_9(self, value):
        self._set_bitfield(byte=3, pos=1, value=value)

    @property
    def reserved_10(self):
        return self._get_bitfield(byte=3, pos=2)

    @reserved_10.setter
    def reserved_10(self, value):
        self._set_bitfield(byte=3, pos=2, value=value)

    @property
    def reserved_11(self):
        return self._get_bitfield(byte=3, pos=3)

    @reserved_11.setter
    def reserved_11(self, value):
        self._set_bitfield(byte=3, pos=3, value=value)

    @property
    def reserved_12(self):
        return self._get_bitfield(byte=3, pos=4)

    @reserved_12.setter
    def reserved_12(self, value):
        self._set_bitfield(byte=3, pos=4, value=value)

    @property
    def reserved_13(self):
        return self._get_bitfield(byte=3, pos=5)

    @reserved_13.setter
    def reserved_13(self, value):
        self._set_bitfield(byte=3, pos=5, value=value)

    @property
    def reserved_14(self):
        return self._get_bitfield(byte=3, pos=6)

    @reserved_14.setter
    def reserved_14(self, value):
        self._set_bitfield(byte=3, pos=6, value=value)

    @property
    def reserved_15(self):
        return self._get_bitfield(byte=3, pos=7)

    @reserved_15.setter
    def reserved_15(self, value):
        self._set_bitfield(byte=3, pos=7, value=value)

    @property
    def active_motor(self):
        return self._get_uint16(byte=4)

    @active_motor.setter
    def active_motor(self, value):
        self._set_uint16(byte=4, value=value)

    @property
    def reserved(self):
        return self._get_uint16(byte=6)

    @reserved.setter
    def reserved(self, value):
        self._set_uint16(byte=6, value=value)


class WslBusMeasurement(AbstractMessage):

    can_id = 0x102
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def bus_voltage(self):
        return self._get_float(byte=0)

    @bus_voltage.setter
    def bus_voltage(self, value):
        self._set_float(byte=0, value=value)

    @property
    def bus_current(self):
        return self._get_float(byte=4)

    @bus_current.setter
    def bus_current(self, value):
        self._set_float(byte=4, value=value)


class WslVelocity(AbstractMessage):

    can_id = 0x103
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def motor_velocity(self):
        return self._get_float(byte=0)

    @motor_velocity.setter
    def motor_velocity(self, value):
        self._set_float(byte=0, value=value)

    @property
    def vehicle_velocity(self):
        return self._get_float(byte=4)

    @vehicle_velocity.setter
    def vehicle_velocity(self, value):
        self._set_float(byte=4, value=value)


class WslPhaseCurrent(AbstractMessage):

    can_id = 0x104
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def phase_b_current(self):
        return self._get_float(byte=0)

    @phase_b_current.setter
    def phase_b_current(self, value):
        self._set_float(byte=0, value=value)

    @property
    def phase_c_current(self):
        return self._get_float(byte=4)

    @phase_c_current.setter
    def phase_c_current(self, value):
        self._set_float(byte=4, value=value)


class WslMotorVoltageVector(AbstractMessage):

    can_id = 0x105
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def vq(self):
        return self._get_float(byte=0)

    @vq.setter
    def vq(self, value):
        self._set_float(byte=0, value=value)

    @property
    def vd(self):
        return self._get_float(byte=4)

    @vd.setter
    def vd(self, value):
        self._set_float(byte=4, value=value)


class WslMotorCurrentVector(AbstractMessage):

    can_id = 0x106
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def iq(self):
        return self._get_float(byte=0)

    @iq.setter
    def iq(self, value):
        self._set_float(byte=0, value=value)

    @property
    def id(self):
        return self._get_float(byte=4)

    @id.setter
    def id(self, value):
        self._set_float(byte=4, value=value)


class WslMotorBackemf(AbstractMessage):

    can_id = 0x107
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def bemfq(self):
        return self._get_float(byte=0)

    @bemfq.setter
    def bemfq(self, value):
        self._set_float(byte=0, value=value)

    @property
    def bemfd(self):
        return self._get_float(byte=4)

    @bemfd.setter
    def bemfd(self, value):
        self._set_float(byte=4, value=value)


class Wsl15165VoltageRail(AbstractMessage):

    can_id = 0x108
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def reference_165v(self):
        return self._get_float(byte=0)

    @reference_165v.setter
    def reference_165v(self, value):
        self._set_float(byte=0, value=value)

    @property
    def supply_15v(self):
        return self._get_float(byte=4)

    @supply_15v.setter
    def supply_15v(self, value):
        self._set_float(byte=4, value=value)


class Wsl2512VoltageRail(AbstractMessage):

    can_id = 0x109
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def supply_12v(self):
        return self._get_float(byte=0)

    @supply_12v.setter
    def supply_12v(self, value):
        self._set_float(byte=0, value=value)

    @property
    def supply_25v(self):
        return self._get_float(byte=4)

    @supply_25v.setter
    def supply_25v(self, value):
        self._set_float(byte=4, value=value)


class WslHeatsinkMotorTemp(AbstractMessage):

    can_id = 0x10b
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def motor_temp(self):
        return self._get_float(byte=0)

    @motor_temp.setter
    def motor_temp(self, value):
        self._set_float(byte=0, value=value)

    @property
    def heatsink_temp(self):
        return self._get_float(byte=4)

    @heatsink_temp.setter
    def heatsink_temp(self, value):
        self._set_float(byte=4, value=value)


class WslDspBoardTemp(AbstractMessage):

    can_id = 0x10c
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def dsp_board_temp(self):
        return self._get_float(byte=0)

    @dsp_board_temp.setter
    def dsp_board_temp(self, value):
        self._set_float(byte=0, value=value)

    @property
    def reserved(self):
        return self._get_float(byte=4)

    @reserved.setter
    def reserved(self, value):
        self._set_float(byte=4, value=value)


class WslOdometerBusAmphoursMeasurement(AbstractMessage):

    can_id = 0x10e
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def odometer(self):
        return self._get_float(byte=0)

    @odometer.setter
    def odometer(self, value):
        self._set_float(byte=0, value=value)

    @property
    def dc_bus_amphours(self):
        return self._get_float(byte=4)

    @dc_bus_amphours.setter
    def dc_bus_amphours(self, value):
        self._set_float(byte=4, value=value)


class WslReserved(AbstractMessage):

    can_id = 0x10d
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def reserved0(self):
        return self._get_float(byte=0)

    @reserved0.setter
    def reserved0(self, value):
        self._set_float(byte=0, value=value)

    @property
    def reserved1(self):
        return self._get_float(byte=4)

    @reserved1.setter
    def reserved1(self, value):
        self._set_float(byte=4, value=value)


class WslSlipSpeedMeasurement(AbstractMessage):

    can_id = 0x117
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def reserved(self):
        return self._get_float(byte=0)

    @reserved.setter
    def reserved(self, value):
        self._set_float(byte=0, value=value)

    @property
    def slip_speed(self):
        return self._get_float(byte=4)

    @slip_speed.setter
    def slip_speed(self, value):
        self._set_float(byte=4, value=value)
