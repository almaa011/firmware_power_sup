
# This file is generated by hitl_msg_gen.py

from messages.abstract_message import AbstractMessage

import can  # pip install python-can    

class BmsAhSet(AbstractMessage):

    can_id = 0x16
    length = 4
    period = 0.0  # TODO: not implemented yet!

    @property
    def ah(self):
        return self._get_uint32(byte=0)

    @ah.setter
    def ah(self, value):
        self._set_uint32(byte=0, value=value)


class BmsWhSet(AbstractMessage):

    can_id = 0x17
    length = 4
    period = 0.0  # TODO: not implemented yet!

    @property
    def wh(self):
        return self._get_uint32(byte=0)

    @wh.setter
    def wh(self, value):
        self._set_uint32(byte=0, value=value)


class BmsKill(AbstractMessage):

    can_id = 0x1a
    length = 1
    period = 0.0  # TODO: not implemented yet!

    @property
    def KILL_HARD(self):
        return self._get_bitfield(byte=0, pos=0)

    @KILL_HARD.setter
    def KILL_HARD(self, value):
        self._set_bitfield(byte=0, pos=0, value=value)


class TelemetryRtcReset(AbstractMessage):

    can_id = 0x700
    length = 6
    period = 0.0  # TODO: not implemented yet!

    @property
    def year(self):
        return self._get_uint8(byte=0)

    @year.setter
    def year(self, value):
        self._set_uint8(byte=0, value=value)

    @property
    def month(self):
        return self._get_uint8(byte=1)

    @month.setter
    def month(self, value):
        self._set_uint8(byte=1, value=value)

    @property
    def day(self):
        return self._get_uint8(byte=2)

    @day.setter
    def day(self, value):
        self._set_uint8(byte=2, value=value)

    @property
    def hour(self):
        return self._get_uint8(byte=3)

    @hour.setter
    def hour(self, value):
        self._set_uint8(byte=3, value=value)

    @property
    def minute(self):
        return self._get_uint8(byte=4)

    @minute.setter
    def minute(self, value):
        self._set_uint8(byte=4, value=value)

    @property
    def second(self):
        return self._get_uint8(byte=5)

    @second.setter
    def second(self, value):
        self._set_uint8(byte=5, value=value)
