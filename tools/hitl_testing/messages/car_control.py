
# This file is generated by hitl_msg_gen.py

from messages.abstract_message import AbstractMessage

import can  # pip install python-can    

class DashboardPedalPercentages(AbstractMessage):

    can_id = 0x290
    length = 2
    period = 0.0  # TODO: not implemented yet!

    @property
    def accel_pedal_value(self):
        return self._get_uint8(byte=0)

    @accel_pedal_value.setter
    def accel_pedal_value(self, value):
        self._set_uint8(byte=0, value=value)

    @property
    def brake_pedal_value(self):
        return self._get_uint8(byte=1)

    @brake_pedal_value.setter
    def brake_pedal_value(self, value):
        self._set_uint8(byte=1, value=value)


class CarState(AbstractMessage):

    can_id = 0x291
    length = 1
    period = 0.0  # TODO: not implemented yet!

    @property
    def state(self):
        return self._get_uint8(byte=0)

    @state.setter
    def state(self, value):
        self._set_uint8(byte=0, value=value)


class DashboardPedalFault(AbstractMessage):

    can_id = 0x292
    length = 2
    period = 0.0  # TODO: not implemented yet!

    @property
    def brake_fault_count(self):
        return self._get_uint8(byte=0)

    @brake_fault_count.setter
    def brake_fault_count(self, value):
        self._set_uint8(byte=0, value=value)

    @property
    def accel_fault_count(self):
        return self._get_uint8(byte=1)

    @accel_fault_count.setter
    def accel_fault_count(self, value):
        self._set_uint8(byte=1, value=value)


class DashboardSystemTimeoutTest(AbstractMessage):

    can_id = 0x299
    length = 1
    period = 0.0  # TODO: not implemented yet!

    @property
    def steering_disconnected(self):
        return self._get_bitfield(byte=0, pos=0)

    @steering_disconnected.setter
    def steering_disconnected(self, value):
        self._set_bitfield(byte=0, pos=0, value=value)

    @property
    def vision_front_disconnected(self):
        return self._get_bitfield(byte=0, pos=1)

    @vision_front_disconnected.setter
    def vision_front_disconnected(self, value):
        self._set_bitfield(byte=0, pos=1, value=value)

    @property
    def vision_rear_disconnected(self):
        return self._get_bitfield(byte=0, pos=2)

    @vision_rear_disconnected.setter
    def vision_rear_disconnected(self, value):
        self._set_bitfield(byte=0, pos=2, value=value)

    @property
    def telemetry_disconnected(self):
        return self._get_bitfield(byte=0, pos=3)

    @telemetry_disconnected.setter
    def telemetry_disconnected(self, value):
        self._set_bitfield(byte=0, pos=3, value=value)

    @property
    def wsl_disconnected(self):
        return self._get_bitfield(byte=0, pos=4)

    @wsl_disconnected.setter
    def wsl_disconnected(self, value):
        self._set_bitfield(byte=0, pos=4, value=value)

    @property
    def wsr_disconnected(self):
        return self._get_bitfield(byte=0, pos=5)

    @wsr_disconnected.setter
    def wsr_disconnected(self, value):
        self._set_bitfield(byte=0, pos=5, value=value)

    @property
    def front_mppt_disconnected(self):
        return self._get_bitfield(byte=0, pos=6)

    @front_mppt_disconnected.setter
    def front_mppt_disconnected(self, value):
        self._set_bitfield(byte=0, pos=6, value=value)

    @property
    def rear_mppt_disconnected(self):
        return self._get_bitfield(byte=0, pos=7)

    @rear_mppt_disconnected.setter
    def rear_mppt_disconnected(self, value):
        self._set_bitfield(byte=0, pos=7, value=value)


class CarSpeed(AbstractMessage):

    can_id = 0x29a
    length = 4
    period = 0.0  # TODO: not implemented yet!

    @property
    def speed(self):
        return self._get_float(byte=0)

    @speed.setter
    def speed(self, value):
        self._set_float(byte=0, value=value)


class FlightComputerLvBoardDisconnectCounts(AbstractMessage):

    can_id = 0x29b
    length = 6
    period = 0.0  # TODO: not implemented yet!

    @property
    def front_lights(self):
        return self._get_uint8(byte=0)

    @front_lights.setter
    def front_lights(self, value):
        self._set_uint8(byte=0, value=value)

    @property
    def rear_lights(self):
        return self._get_uint8(byte=1)

    @rear_lights.setter
    def rear_lights(self, value):
        self._set_uint8(byte=1, value=value)

    @property
    def steering(self):
        return self._get_uint8(byte=2)

    @steering.setter
    def steering(self, value):
        self._set_uint8(byte=2, value=value)

    @property
    def vision(self):
        return self._get_uint8(byte=3)

    @vision.setter
    def vision(self, value):
        self._set_uint8(byte=3, value=value)

    @property
    def driver_display(self):
        return self._get_uint8(byte=4)

    @driver_display.setter
    def driver_display(self, value):
        self._set_uint8(byte=4, value=value)

    @property
    def center_console(self):
        return self._get_uint8(byte=5)

    @center_console.setter
    def center_console(self, value):
        self._set_uint8(byte=5, value=value)


class FlightComputerHvBoardDisconnectCounts(AbstractMessage):

    can_id = 0x29c
    length = 6
    period = 0.0  # TODO: not implemented yet!

    @property
    def bms(self):
        return self._get_uint8(byte=0)

    @bms.setter
    def bms(self, value):
        self._set_uint8(byte=0, value=value)

    @property
    def charger(self):
        return self._get_uint8(byte=1)

    @charger.setter
    def charger(self, value):
        self._set_uint8(byte=1, value=value)

    @property
    def wsl(self):
        return self._get_uint8(byte=2)

    @wsl.setter
    def wsl(self, value):
        self._set_uint8(byte=2, value=value)

    @property
    def wsr(self):
        return self._get_uint8(byte=3)

    @wsr.setter
    def wsr(self, value):
        self._set_uint8(byte=3, value=value)

    @property
    def mppt_front(self):
        return self._get_uint8(byte=4)

    @mppt_front.setter
    def mppt_front(self, value):
        self._set_uint8(byte=4, value=value)

    @property
    def mppt_rear(self):
        return self._get_uint8(byte=5)

    @mppt_rear.setter
    def mppt_rear(self, value):
        self._set_uint8(byte=5, value=value)


class FlightComputerInternalState(AbstractMessage):

    can_id = 0x29d
    length = 5
    period = 0.0  # TODO: not implemented yet!

    @property
    def battery_kill(self):
        return self._get_bitfield(byte=0, pos=0)

    @battery_kill.setter
    def battery_kill(self, value):
        self._set_bitfield(byte=0, pos=0, value=value)

    @property
    def cells_in_charging_threshold(self):
        return self._get_bitfield(byte=0, pos=1)

    @cells_in_charging_threshold.setter
    def cells_in_charging_threshold(self, value):
        self._set_bitfield(byte=0, pos=1, value=value)

    @property
    def first_packet_received(self):
        return self._get_bitfield(byte=0, pos=2)

    @first_packet_received.setter
    def first_packet_received(self, value):
        self._set_bitfield(byte=0, pos=2, value=value)

    @property
    def proximity_detected(self):
        return self._get_bitfield(byte=1, pos=0)

    @proximity_detected.setter
    def proximity_detected(self, value):
        self._set_bitfield(byte=1, pos=0, value=value)

    @property
    def enable(self):
        return self._get_bitfield(byte=2, pos=0)

    @enable.setter
    def enable(self, value):
        self._set_bitfield(byte=2, pos=0, value=value)

    @property
    def sending_reset(self):
        return self._get_bitfield(byte=3, pos=0)

    @sending_reset.setter
    def sending_reset(self, value):
        self._set_bitfield(byte=3, pos=0, value=value)

    @property
    def regen_enable(self):
        return self._get_bitfield(byte=3, pos=1)

    @regen_enable.setter
    def regen_enable(self, value):
        self._set_bitfield(byte=3, pos=1, value=value)

    @property
    def accel_pedal_disconnect(self):
        return self._get_bitfield(byte=4, pos=0)

    @accel_pedal_disconnect.setter
    def accel_pedal_disconnect(self, value):
        self._set_bitfield(byte=4, pos=0, value=value)

    @property
    def brake_pedal_disconnect(self):
        return self._get_bitfield(byte=4, pos=1)

    @brake_pedal_disconnect.setter
    def brake_pedal_disconnect(self, value):
        self._set_bitfield(byte=4, pos=1, value=value)


class PowerToDrive(AbstractMessage):

    can_id = 0x19e
    length = 6
    period = 0.0  # TODO: not implemented yet!

    @property
    def moving_average_100(self):
        return self._get_int16(byte=0)

    @moving_average_100.setter
    def moving_average_100(self, value):
        self._set_int16(byte=0, value=value)

    @property
    def moving_average_1k(self):
        return self._get_int16(byte=2)

    @moving_average_1k.setter
    def moving_average_1k(self, value):
        self._set_int16(byte=2, value=value)

    @property
    def moving_average_10k(self):
        return self._get_int16(byte=4)

    @moving_average_10k.setter
    def moving_average_10k(self, value):
        self._set_int16(byte=4, value=value)


class ArrayPower(AbstractMessage):

    can_id = 0x19f
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def front_array_channel_0(self):
        return self._get_uint16(byte=0)

    @front_array_channel_0.setter
    def front_array_channel_0(self, value):
        self._set_uint16(byte=0, value=value)

    @property
    def front_array_channel_1(self):
        return self._get_uint16(byte=2)

    @front_array_channel_1.setter
    def front_array_channel_1(self, value):
        self._set_uint16(byte=2, value=value)

    @property
    def rear_array_channel_0(self):
        return self._get_uint16(byte=4)

    @rear_array_channel_0.setter
    def rear_array_channel_0(self, value):
        self._set_uint16(byte=4, value=value)

    @property
    def rear_array_channel_1(self):
        return self._get_uint16(byte=6)

    @rear_array_channel_1.setter
    def rear_array_channel_1(self, value):
        self._set_uint16(byte=6, value=value)


class VisionTurnSignalsCommand(AbstractMessage):

    can_id = 0x2b0
    length = 1
    period = 0.0  # TODO: not implemented yet!

    @property
    def left_turn_signal(self):
        return self._get_bitfield(byte=0, pos=0)

    @left_turn_signal.setter
    def left_turn_signal(self, value):
        self._set_bitfield(byte=0, pos=0, value=value)

    @property
    def right_turn_signal(self):
        return self._get_bitfield(byte=0, pos=1)

    @right_turn_signal.setter
    def right_turn_signal(self, value):
        self._set_bitfield(byte=0, pos=1, value=value)

    @property
    def spare_1(self):
        return self._get_bitfield(byte=0, pos=2)

    @spare_1.setter
    def spare_1(self, value):
        self._set_bitfield(byte=0, pos=2, value=value)

    @property
    def spare_2(self):
        return self._get_bitfield(byte=0, pos=3)

    @spare_2.setter
    def spare_2(self, value):
        self._set_bitfield(byte=0, pos=3, value=value)

    @property
    def spare_3(self):
        return self._get_bitfield(byte=0, pos=4)

    @spare_3.setter
    def spare_3(self, value):
        self._set_bitfield(byte=0, pos=4, value=value)


class VisionBrakeLightsCommand(AbstractMessage):

    can_id = 0x2b1
    length = 1
    period = 0.0  # TODO: not implemented yet!

    @property
    def brake_lights(self):
        return self._get_bitfield(byte=0, pos=0)

    @brake_lights.setter
    def brake_lights(self, value):
        self._set_bitfield(byte=0, pos=0, value=value)

    @property
    def spare_1(self):
        return self._get_bitfield(byte=0, pos=1)

    @spare_1.setter
    def spare_1(self, value):
        self._set_bitfield(byte=0, pos=1, value=value)

    @property
    def spare_2(self):
        return self._get_bitfield(byte=0, pos=2)

    @spare_2.setter
    def spare_2(self, value):
        self._set_bitfield(byte=0, pos=2, value=value)

    @property
    def spare_3(self):
        return self._get_bitfield(byte=0, pos=3)

    @spare_3.setter
    def spare_3(self, value):
        self._set_bitfield(byte=0, pos=3, value=value)


class VisionHeadlightsCommand(AbstractMessage):

    can_id = 0x2b2
    length = 5
    period = 0.0  # TODO: not implemented yet!

    @property
    def headlights(self):
        return self._get_bitfield(byte=0, pos=0)

    @headlights.setter
    def headlights(self, value):
        self._set_bitfield(byte=0, pos=0, value=value)

    @property
    def high_beams(self):
        return self._get_bitfield(byte=0, pos=1)

    @high_beams.setter
    def high_beams(self, value):
        self._set_bitfield(byte=0, pos=1, value=value)

    @property
    def spare_1(self):
        return self._get_bitfield(byte=0, pos=2)

    @spare_1.setter
    def spare_1(self, value):
        self._set_bitfield(byte=0, pos=2, value=value)

    @property
    def spare_2(self):
        return self._get_bitfield(byte=0, pos=3)

    @spare_2.setter
    def spare_2(self, value):
        self._set_bitfield(byte=0, pos=3, value=value)

    @property
    def spare_3(self):
        return self._get_bitfield(byte=0, pos=4)

    @spare_3.setter
    def spare_3(self, value):
        self._set_bitfield(byte=0, pos=4, value=value)

    @property
    def brightness(self):
        return self._get_float(byte=1)

    @brightness.setter
    def brightness(self, value):
        self._set_float(byte=1, value=value)


class VisionHornCommand(AbstractMessage):

    can_id = 0x2b3
    length = 1
    period = 0.0  # TODO: not implemented yet!

    @property
    def horn(self):
        return self._get_bitfield(byte=0, pos=0)

    @horn.setter
    def horn(self, value):
        self._set_bitfield(byte=0, pos=0, value=value)

    @property
    def spare(self):
        return self._get_bitfield(byte=0, pos=1)

    @spare.setter
    def spare(self, value):
        self._set_bitfield(byte=0, pos=1, value=value)


class VisionArrayLatchesCommand(AbstractMessage):

    can_id = 0x2b4
    length = 1
    period = 0.0  # TODO: not implemented yet!

    @property
    def array_front(self):
        return self._get_bitfield(byte=0, pos=0)

    @array_front.setter
    def array_front(self, value):
        self._set_bitfield(byte=0, pos=0, value=value)

    @property
    def array_rear(self):
        return self._get_bitfield(byte=0, pos=1)

    @array_rear.setter
    def array_rear(self, value):
        self._set_bitfield(byte=0, pos=1, value=value)


class VisionRearviewCommand(AbstractMessage):

    can_id = 0x2b5
    length = 1
    period = 0.0  # TODO: not implemented yet!

    @property
    def left(self):
        return self._get_bitfield(byte=0, pos=0)

    @left.setter
    def left(self, value):
        self._set_bitfield(byte=0, pos=0, value=value)

    @property
    def right(self):
        return self._get_bitfield(byte=0, pos=1)

    @right.setter
    def right(self, value):
        self._set_bitfield(byte=0, pos=1, value=value)

    @property
    def rear(self):
        return self._get_bitfield(byte=0, pos=2)

    @rear.setter
    def rear(self, value):
        self._set_bitfield(byte=0, pos=2, value=value)


class TrackerEnable(AbstractMessage):

    can_id = 0x610
    length = 1
    period = 0.0  # TODO: not implemented yet!

    @property
    def enable(self):
        return self._get_uint8(byte=0)

    @enable.setter
    def enable(self, value):
        self._set_uint8(byte=0, value=value)
