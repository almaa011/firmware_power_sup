
# This file is generated by hitl_msg_gen.py

from messages.abstract_message import AbstractMessage

import can  # pip install python-can    

class ChargerState(AbstractMessage):

    can_id = 0x573
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def charger_plugged(self):
        return self._get_bitfield(byte=0, pos=0)

    @charger_plugged.setter
    def charger_plugged(self, value):
        self._set_bitfield(byte=0, pos=0, value=value)

    @property
    def charger_max_temp(self):
        return self._get_uint16(byte=1)

    @charger_max_temp.setter
    def charger_max_temp(self, value):
        self._set_uint16(byte=1, value=value)

    @property
    def CHARGER_OVERVOLT(self):
        return self._get_bitfield(byte=3, pos=0)

    @CHARGER_OVERVOLT.setter
    def CHARGER_OVERVOLT(self, value):
        self._set_bitfield(byte=3, pos=0, value=value)

    @property
    def CHARGER_OVERTEMP(self):
        return self._get_bitfield(byte=3, pos=1)

    @CHARGER_OVERTEMP.setter
    def CHARGER_OVERTEMP(self, value):
        self._set_bitfield(byte=3, pos=1, value=value)

    @property
    def CHARGER_CAN_TIMEOUT(self):
        return self._get_bitfield(byte=3, pos=2)

    @CHARGER_CAN_TIMEOUT.setter
    def CHARGER_CAN_TIMEOUT(self, value):
        self._set_bitfield(byte=3, pos=2, value=value)

    @property
    def BATTERY_HV_KILL(self):
        return self._get_bitfield(byte=3, pos=3)

    @BATTERY_HV_KILL.setter
    def BATTERY_HV_KILL(self, value):
        self._set_bitfield(byte=3, pos=3, value=value)

    @property
    def BATTERY_UNDERVOLT(self):
        return self._get_bitfield(byte=3, pos=4)

    @BATTERY_UNDERVOLT.setter
    def BATTERY_UNDERVOLT(self, value):
        self._set_bitfield(byte=3, pos=4, value=value)

    @property
    def BATTERY_OVERVOLT(self):
        return self._get_bitfield(byte=3, pos=5)

    @BATTERY_OVERVOLT.setter
    def BATTERY_OVERVOLT(self, value):
        self._set_bitfield(byte=3, pos=5, value=value)

    @property
    def BATTERY_CELL_OVERTEMP(self):
        return self._get_bitfield(byte=3, pos=6)

    @BATTERY_CELL_OVERTEMP.setter
    def BATTERY_CELL_OVERTEMP(self, value):
        self._set_bitfield(byte=3, pos=6, value=value)

    @property
    def BATTERY_CAN_TIMEOUT(self):
        return self._get_bitfield(byte=3, pos=7)

    @BATTERY_CAN_TIMEOUT.setter
    def BATTERY_CAN_TIMEOUT(self, value):
        self._set_bitfield(byte=3, pos=7, value=value)

    @property
    def charging_current(self):
        return self._get_float(byte=4)

    @charging_current.setter
    def charging_current(self, value):
        self._set_float(byte=4, value=value)


class ChargerBmsRequest(AbstractMessage):

    can_id = 0x74
    length = 1
    period = 0.0  # TODO: not implemented yet!

    @property
    def charging_requested(self):
        return self._get_bitfield(byte=0, pos=0)

    @charging_requested.setter
    def charging_requested(self, value):
        self._set_bitfield(byte=0, pos=0, value=value)


class ChargerCurrentVoltage(AbstractMessage):

    can_id = 0x576
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def max_current(self):
        return self._get_float(byte=0)

    @max_current.setter
    def max_current(self, value):
        self._set_float(byte=0, value=value)

    @property
    def max_capacity(self):
        return self._get_float(byte=4)

    @max_capacity.setter
    def max_capacity(self, value):
        self._set_float(byte=4, value=value)


class ChargerPower(AbstractMessage):

    can_id = 0x577
    length = 4
    period = 0.0  # TODO: not implemented yet!

    @property
    def power(self):
        return self._get_float(byte=0)

    @power.setter
    def power(self, value):
        self._set_float(byte=0, value=value)


class ThunderstruckControlMessage(AbstractMessage):

    can_id = 0x18e54024
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def Enable(self):
        return self._get_uint8(byte=0)

    @Enable.setter
    def Enable(self, value):
        self._set_uint8(byte=0, value=value)

    @property
    def CHARGE_VOLTAGE(self):
        return self._get_uint16(byte=1)

    @CHARGE_VOLTAGE.setter
    def CHARGE_VOLTAGE(self, value):
        self._set_uint16(byte=1, value=value)

    @property
    def CHARGE_CURRENT(self):
        return self._get_uint16(byte=3)

    @CHARGE_CURRENT.setter
    def CHARGE_CURRENT(self, value):
        self._set_uint16(byte=3, value=value)

    @property
    def LED_BLINK_PATTERN(self):
        return self._get_uint8(byte=5)

    @LED_BLINK_PATTERN.setter
    def LED_BLINK_PATTERN(self, value):
        self._set_uint8(byte=5, value=value)

    @property
    def RESERVED(self):
        return self._get_uint16(byte=6)

    @RESERVED.setter
    def RESERVED(self, value):
        self._set_uint16(byte=6, value=value)
