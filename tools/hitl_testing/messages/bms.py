
# This file is generated by hitl_msg_gen.py

from messages.abstract_message import AbstractMessage

import can  # pip install python-can    

class BmsMeasurement(AbstractMessage):

    can_id = 0x10
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def battery_voltage(self):
        return self._get_uint16(byte=0)

    @battery_voltage.setter
    def battery_voltage(self, value):
        self._set_uint16(byte=0, value=value)

    @property
    def aux_voltage(self):
        return self._get_uint16(byte=2)

    @aux_voltage.setter
    def aux_voltage(self, value):
        self._set_uint16(byte=2, value=value)

    @property
    def current(self):
        return self._get_float(byte=4)

    @current.setter
    def current(self, value):
        self._set_float(byte=4, value=value)


class BatteryStatus(AbstractMessage):

    can_id = 0x11
    length = 4
    period = 0.0  # TODO: not implemented yet!

    @property
    def startup(self):
        return self._get_bitfield(byte=0, pos=0)

    @startup.setter
    def startup(self, value):
        self._set_bitfield(byte=0, pos=0, value=value)

    @property
    def precharge(self):
        return self._get_bitfield(byte=0, pos=1)

    @precharge.setter
    def precharge(self, value):
        self._set_bitfield(byte=0, pos=1, value=value)

    @property
    def discharging(self):
        return self._get_bitfield(byte=0, pos=2)

    @discharging.setter
    def discharging(self, value):
        self._set_bitfield(byte=0, pos=2, value=value)

    @property
    def lv_only(self):
        return self._get_bitfield(byte=0, pos=3)

    @lv_only.setter
    def lv_only(self, value):
        self._set_bitfield(byte=0, pos=3, value=value)

    @property
    def charging(self):
        return self._get_bitfield(byte=0, pos=4)

    @charging.setter
    def charging(self, value):
        self._set_bitfield(byte=0, pos=4, value=value)

    @property
    def wall_charging(self):
        return self._get_bitfield(byte=0, pos=5)

    @wall_charging.setter
    def wall_charging(self, value):
        self._set_bitfield(byte=0, pos=5, value=value)

    @property
    def killed(self):
        return self._get_bitfield(byte=0, pos=6)

    @killed.setter
    def killed(self, value):
        self._set_bitfield(byte=0, pos=6, value=value)

    @property
    def battery_high_contactor(self):
        return self._get_bitfield(byte=1, pos=0)

    @battery_high_contactor.setter
    def battery_high_contactor(self, value):
        self._set_bitfield(byte=1, pos=0, value=value)

    @property
    def battery_low_contactor(self):
        return self._get_bitfield(byte=1, pos=1)

    @battery_low_contactor.setter
    def battery_low_contactor(self, value):
        self._set_bitfield(byte=1, pos=1, value=value)

    @property
    def battery_vicor_contactor(self):
        return self._get_bitfield(byte=1, pos=2)

    @battery_vicor_contactor.setter
    def battery_vicor_contactor(self, value):
        self._set_bitfield(byte=1, pos=2, value=value)

    @property
    def battery_pre_contactor(self):
        return self._get_bitfield(byte=1, pos=3)

    @battery_pre_contactor.setter
    def battery_pre_contactor(self, value):
        self._set_bitfield(byte=1, pos=3, value=value)

    @property
    def battery_high2_contactor(self):
        return self._get_bitfield(byte=1, pos=4)

    @battery_high2_contactor.setter
    def battery_high2_contactor(self, value):
        self._set_bitfield(byte=1, pos=4, value=value)

    @property
    def battery_low2_contactor(self):
        return self._get_bitfield(byte=1, pos=5)

    @battery_low2_contactor.setter
    def battery_low2_contactor(self, value):
        self._set_bitfield(byte=1, pos=5, value=value)

    @property
    def charger_high_contactor(self):
        return self._get_bitfield(byte=1, pos=6)

    @charger_high_contactor.setter
    def charger_high_contactor(self, value):
        self._set_bitfield(byte=1, pos=6, value=value)

    @property
    def charger_pre_contactor(self):
        return self._get_bitfield(byte=1, pos=7)

    @charger_pre_contactor.setter
    def charger_pre_contactor(self, value):
        self._set_bitfield(byte=1, pos=7, value=value)

    @property
    def aux_fault(self):
        return self._get_bitfield(byte=2, pos=0)

    @aux_fault.setter
    def aux_fault(self, value):
        self._set_bitfield(byte=2, pos=0, value=value)

    @property
    def main_fault(self):
        return self._get_bitfield(byte=2, pos=1)

    @main_fault.setter
    def main_fault(self, value):
        self._set_bitfield(byte=2, pos=1, value=value)

    @property
    def aux_power_valid(self):
        return self._get_bitfield(byte=2, pos=2)

    @aux_power_valid.setter
    def aux_power_valid(self, value):
        self._set_bitfield(byte=2, pos=2, value=value)

    @property
    def main_power_valid(self):
        return self._get_bitfield(byte=2, pos=3)

    @main_power_valid.setter
    def main_power_valid(self, value):
        self._set_bitfield(byte=2, pos=3, value=value)

    @property
    def aux_power_active(self):
        return self._get_bitfield(byte=2, pos=4)

    @aux_power_active.setter
    def aux_power_active(self, value):
        self._set_bitfield(byte=2, pos=4, value=value)

    @property
    def main_power_active(self):
        return self._get_bitfield(byte=2, pos=5)

    @main_power_active.setter
    def main_power_active(self, value):
        self._set_bitfield(byte=2, pos=5, value=value)

    @property
    def aux_vicor_enable(self):
        return self._get_bitfield(byte=3, pos=0)

    @aux_vicor_enable.setter
    def aux_vicor_enable(self, value):
        self._set_bitfield(byte=3, pos=0, value=value)

    @property
    def bat_vicor_enable(self):
        return self._get_bitfield(byte=3, pos=1)

    @bat_vicor_enable.setter
    def bat_vicor_enable(self, value):
        self._set_bitfield(byte=3, pos=1, value=value)

    @property
    def aux_relay_held(self):
        return self._get_bitfield(byte=3, pos=2)

    @aux_relay_held.setter
    def aux_relay_held(self, value):
        self._set_bitfield(byte=3, pos=2, value=value)

    @property
    def aux_ref_enable(self):
        return self._get_bitfield(byte=3, pos=3)

    @aux_ref_enable.setter
    def aux_ref_enable(self, value):
        self._set_bitfield(byte=3, pos=3, value=value)

    @property
    def aux_charging_enable(self):
        return self._get_bitfield(byte=3, pos=4)

    @aux_charging_enable.setter
    def aux_charging_enable(self, value):
        self._set_bitfield(byte=3, pos=4, value=value)

    @property
    def kill_hv(self):
        return self._get_bitfield(byte=3, pos=5)

    @kill_hv.setter
    def kill_hv(self, value):
        self._set_bitfield(byte=3, pos=5, value=value)

    @property
    def kill_lv(self):
        return self._get_bitfield(byte=3, pos=6)

    @kill_lv.setter
    def kill_lv(self, value):
        self._set_bitfield(byte=3, pos=6, value=value)

    @property
    def start_button(self):
        return self._get_bitfield(byte=3, pos=7)

    @start_button.setter
    def start_button(self, value):
        self._set_bitfield(byte=3, pos=7, value=value)


class BmsKillReason(AbstractMessage):

    can_id = 0x12
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def OVERVOLT(self):
        return self._get_bitfield(byte=0, pos=0)

    @OVERVOLT.setter
    def OVERVOLT(self, value):
        self._set_bitfield(byte=0, pos=0, value=value)

    @property
    def UNDERVOLT(self):
        return self._get_bitfield(byte=0, pos=1)

    @UNDERVOLT.setter
    def UNDERVOLT(self, value):
        self._set_bitfield(byte=0, pos=1, value=value)

    @property
    def OVERTEMP(self):
        return self._get_bitfield(byte=0, pos=2)

    @OVERTEMP.setter
    def OVERTEMP(self, value):
        self._set_bitfield(byte=0, pos=2, value=value)

    @property
    def TEMP_DISCONNECT(self):
        return self._get_bitfield(byte=0, pos=3)

    @TEMP_DISCONNECT.setter
    def TEMP_DISCONNECT(self, value):
        self._set_bitfield(byte=0, pos=3, value=value)

    @property
    def COMM_FAIL(self):
        return self._get_bitfield(byte=0, pos=4)

    @COMM_FAIL.setter
    def COMM_FAIL(self, value):
        self._set_bitfield(byte=0, pos=4, value=value)

    @property
    def HARDWARE(self):
        return self._get_bitfield(byte=1, pos=0)

    @HARDWARE.setter
    def HARDWARE(self, value):
        self._set_bitfield(byte=1, pos=0, value=value)

    @property
    def KILL_PACKET(self):
        return self._get_bitfield(byte=1, pos=1)

    @KILL_PACKET.setter
    def KILL_PACKET(self, value):
        self._set_bitfield(byte=1, pos=1, value=value)

    @property
    def UKNOWN(self):
        return self._get_bitfield(byte=1, pos=2)

    @UKNOWN.setter
    def UKNOWN(self, value):
        self._set_bitfield(byte=1, pos=2, value=value)

    @property
    def OVERCURRENT(self):
        return self._get_bitfield(byte=1, pos=3)

    @OVERCURRENT.setter
    def OVERCURRENT(self, value):
        self._set_bitfield(byte=1, pos=3, value=value)

    @property
    def PRECHARGE_FAIL(self):
        return self._get_bitfield(byte=1, pos=4)

    @PRECHARGE_FAIL.setter
    def PRECHARGE_FAIL(self, value):
        self._set_bitfield(byte=1, pos=4, value=value)

    @property
    def AUX_OVER_UNDER(self):
        return self._get_bitfield(byte=1, pos=5)

    @AUX_OVER_UNDER.setter
    def AUX_OVER_UNDER(self, value):
        self._set_bitfield(byte=1, pos=5, value=value)

    @property
    def module(self):
        return self._get_uint16(byte=2)

    @module.setter
    def module(self, value):
        self._set_uint16(byte=2, value=value)

    @property
    def value(self):
        return self._get_float(byte=4)

    @value.setter
    def value(self, value):
        self._set_float(byte=4, value=value)


class BmsModuleMinMax(AbstractMessage):

    can_id = 0x13
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def module_max_temp(self):
        return self._get_int16(byte=0)

    @module_max_temp.setter
    def module_max_temp(self, value):
        self._set_int16(byte=0, value=value)

    @property
    def module_min_temp(self):
        return self._get_int16(byte=2)

    @module_min_temp.setter
    def module_min_temp(self, value):
        self._set_int16(byte=2, value=value)

    @property
    def module_max_voltage(self):
        return self._get_uint16(byte=4)

    @module_max_voltage.setter
    def module_max_voltage(self, value):
        self._set_uint16(byte=4, value=value)

    @property
    def module_min_voltage(self):
        return self._get_uint16(byte=6)

    @module_min_voltage.setter
    def module_min_voltage(self, value):
        self._set_uint16(byte=6, value=value)


class BmsSoc(AbstractMessage):

    can_id = 0x14
    length = 4
    period = 0.0  # TODO: not implemented yet!

    @property
    def soc(self):
        return self._get_float(byte=0)

    @soc.setter
    def soc(self, value):
        self._set_float(byte=0, value=value)


class BmsCapacity(AbstractMessage):

    can_id = 0x15
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def Ah(self):
        return self._get_float(byte=0)

    @Ah.setter
    def Ah(self, value):
        self._set_float(byte=0, value=value)

    @property
    def Wh(self):
        return self._get_float(byte=4)

    @Wh.setter
    def Wh(self, value):
        self._set_float(byte=4, value=value)


class BmsCurrentlimit(AbstractMessage):

    can_id = 0x18
    length = 4
    period = 0.0  # TODO: not implemented yet!

    @property
    def current_max(self):
        return self._get_int16(byte=0)

    @current_max.setter
    def current_max(self, value):
        self._set_int16(byte=0, value=value)

    @property
    def current_min(self):
        return self._get_int16(byte=2)

    @current_min.setter
    def current_min(self, value):
        self._set_int16(byte=2, value=value)


class BmsFanInfo(AbstractMessage):

    can_id = 0x19
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def fan1(self):
        return self._get_uint16(byte=0)

    @fan1.setter
    def fan1(self, value):
        self._set_uint16(byte=0, value=value)

    @property
    def fan2(self):
        return self._get_uint16(byte=2)

    @fan2.setter
    def fan2(self, value):
        self._set_uint16(byte=2, value=value)

    @property
    def fan3(self):
        return self._get_uint16(byte=4)

    @fan3.setter
    def fan3(self, value):
        self._set_uint16(byte=4, value=value)

    @property
    def fan4(self):
        return self._get_uint16(byte=6)

    @fan4.setter
    def fan4(self, value):
        self._set_uint16(byte=6, value=value)


class BmsSetMinFanSpeed(AbstractMessage):

    can_id = 0x1b
    length = 6
    period = 0.0  # TODO: not implemented yet!

    @property
    def fan_percentage(self):
        return self._get_float(byte=0)

    @fan_percentage.setter
    def fan_percentage(self, value):
        self._set_float(byte=0, value=value)

    @property
    def time(self):
        return self._get_uint16(byte=4)

    @time.setter
    def time(self, value):
        self._set_uint16(byte=4, value=value)


class BmsModule(AbstractMessage):

    can_id = 0x1c
    length = 8
    period = 0.0  # TODO: not implemented yet!

    @property
    def voltage(self):
        return self._get_float(byte=0)

    @voltage.setter
    def voltage(self, value):
        self._set_float(byte=0, value=value)

    @property
    def temperature(self):
        return self._get_float(byte=4)

    @temperature.setter
    def temperature(self, value):
        self._set_float(byte=4, value=value)


class BmsChargerResponse(AbstractMessage):

    can_id = 0x75
    length = 1
    period = 0.0  # TODO: not implemented yet!

    @property
    def charging_ready(self):
        return self._get_bitfield(byte=0, pos=0)

    @charging_ready.setter
    def charging_ready(self, value):
        self._set_bitfield(byte=0, pos=0, value=value)
